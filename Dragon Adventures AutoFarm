repeat wait() until game:IsLoaded()
if game.GameId ~= 1235188606 then return end

local RunService, Player, StarterGui, VirtualUser, Lighting = game:GetService'RunService', game:GetService'Players'.LocalPlayer, game:GetService'StarterGui', game:GetService'VirtualUser', game:GetService'Lighting'

local Plateform, Stopped, Collected, Attempts, PlayerGui, Current = Instance.new('Part', workspace), false, 0, 20, Player:WaitForChild'PlayerGui', 0
Plateform.Size, Plateform.Transparency, Plateform.Anchored = Vector3.new(12,1,12), 1, true

local ScreenGui = Instance.new('ScreenGui', PlayerGui)
ScreenGui.DisplayOrder, ScreenGui.IgnoreGuiInset, ScreenGui.ResetOnSpawn = 3, true, false
local Background = Instance.new('Frame', ScreenGui)
Background.BackgroundColor3, Background.BackgroundTransparency, Background.Size = Color3.new(0,0,0), .15, UDim2.new(1,0,1,0)
local Title = Instance.new('TextLabel', Background)
Title.TextColor3, Title.AnchorPoint, Title.BackgroundTransparency, Title.Position, Title.Size, Title.ZIndex, Title.Font, Title.Text, Title.TextScaled = Color3.new(1,1,1), Vector2.new(.5,.5), 1, UDim2.new(.5,0,.1,0), UDim2.new(1,-10,.1,-10), 2, 'SourceSans', 'Warrior\'s AutoFarm', true
local Next = Instance.new('TextButton', Background)
Next.AnchorPoint, Next.AutoButtonColor, Next.BackgroundColor3, Next.BackgroundTransparency, Next.BorderSizePixel, Next.Position, Next.Size, Next.SizeConstraint, Next.ZIndex, Next.Font, Next.Text = Vector2.new(.5,1), false, Color3.fromRGB(80,80,80), .55, 0, UDim2.new(.5,0,.975,0), UDim2.new(.075,0,.075,0), 'RelativeYY', 2, 'SourceSans', ''
local NextText = Instance.new('TextLabel', Next)
NextText.TextColor3, NextText.BackgroundTransparency, NextText.Size, NextText.ZIndex, NextText.Font, NextText.Text, NextText.TextScaled = Color3.new(1,1,1), 1, UDim2.new(1,0,.8,5), 2, 'SourceSans', 'â†“', true
local InputBox = Instance.new('TextBox', Background)
InputBox.AnchorPoint, InputBox.BackgroundColor3, InputBox.BackgroundTransparency, InputBox.BorderSizePixel, InputBox.ClearTextOnFocus, InputBox.Position, InputBox.Size, InputBox.Font, InputBox.PlaceholderColor3, InputBox.PlaceholderText, InputBox.Text, InputBox.TextColor3, InputBox.TextSize, InputBox.TextTruncate = Vector2.new(.5,.5), Color3.fromRGB(126,126,126), .9, 0, true, UDim2.new(.5,0,1.5,0), UDim2.new(1,-10,.08,-10), 'SourceSans', Color3.fromRGB(147,147,147), 'Input', '', Color3.fromRGB(147,147,147), 35, 'AtEnd'
local Description = Instance.new('TextLabel', InputBox)
Description.BackgroundTransparency, Description.Position, Description.Size, Description.Font, Description.Text, Description.TextColor3, Description.TextSize, Description.TextTruncate, Description.Name = 1, UDim2.new(0,0,1,5), UDim2.new(1,0,1,0), 'SourceSans', 'Description', Color3.fromRGB(190,190,190), 20, 'AtEnd', 'Description'
local Header = Instance.new('TextLabel', InputBox)
Header.AnchorPoint, Header.BackgroundTransparency, Header.Position, Header.Size, Header.Font, Header.Text, Header.TextColor3, Header.TextScaled, Header.Name = Vector2.new(0,1), 1, UDim2.new(0,0,0,-5), UDim2.new(1,0,.9,0), 'SourceSans', 'Title', Color3.fromRGB(190,190,190), true, 'Header'
local Blur = Instance.new('BlurEffect', Lighting)
Blur.Size = 50

local Data = {
    ToCollect = 9990,
    ToSell = 10,
    EggOffset = 10,
    KickPlayer = false,
    Attempts = 20
}

Player.Idled:Connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)

local function SendNotification(NoTitle, NoText)
    StarterGui:SetCore('SendNotification', {
        Title = string.format('AutoFarm | %s', NoTitle),
        Text = NoText
    })
end

local PlacePlatform = coroutine.create(function()
    while wait() do
        xpcall(function()
            Plateform.CFrame = Player.Character:WaitForChild'HumanoidRootPart'.CFrame + Vector3.new(0,-4.8,0)
        end, function(Error)
            warn(Error)
            SendNotification('Error', 'A error was caught and logged.\nResuming...')
        end)
    end
end)

local function SellItems()
    for _, Item in ipairs(Player.Data.Resources:GetChildren()) do
        if Item.Value >= Data['ToCollect'] then
            repeat wait()
                Player.Remote:FireServer('SellResource', {[1]=Item.Name, [2]=Data['ToSell']})
            until Item.Value <= Data['ToCollect'] - Data['ToSell']
            SendNotification('Sold', string.format('Successfully sold %s %s\'s.', tostring(Data['ToSell']), Item.Name))
        end
    end
end

local function DetermineObject(Object)
    if Object:IsA'Model' and Object:FindFirstChildOfClass'MeshPart' then
        return Object:FindFirstChildOfClass'MeshPart'
    elseif not Object:IsA'Model' then
        return Object
    end
end

local StartLoop = coroutine.create(function()
    while true do
        repeat wait() until Player.Character
        Collected = Collected + 1
        local Resource = {nil, workspace.CollectionZones.Resources}
        repeat wait()
            if Collected == Data['EggOffset'] then
                if workspace.CollectionZones.Eggs:FindFirstChildOfClass'Model' then
                    if Player.Data.Eggs[workspace.CollectionZones.Eggs:FindFirstChildOfClass'Model'.Name].Value < 10 then
                        Resource[2] = workspace.CollectionZones.Eggs
                    end
                end
            end
            Resource[1] = Resource[2]:GetChildren()[math.random(1, #Resource[2]:GetChildren())]
        until Resource[1] ~= nil
        SellItems()
        local ToUse = DetermineObject(Resource[1])
        if Resource[2].Name == 'Eggs' then
            for _, EggPart in pairs(Resource[2]:GetChildren()) do
                if EggPart:FindFirstChild'Egg' then
                    repeat
                        Player.Character.HumanoidRootPart.CFrame = EggPart.Egg.CFrame
                        wait() Player.Remote:FireServer('PickEggObj', EggPart)
                    until EggPart == nil or EggPart.Parent == nil
                end
            end
            Collected = 0
        else
            local Attempts = Data['Attempts']
            repeat
                pcall(function()
                    Player.Character.HumanoidRootPart.CFrame = ToUse.CFrame + Vector3.new(0,-15,0)
                end)
                wait(.1)
                if Resource[2].Name == 'Resources' then
                    Player.Remote:FireServer('PickResourceObj', Resource[1])
                else
                    print'p'
                    Player.Remote:FireServer('PickEggObj', Resource[1])
                end
                Attempts = Attempts - 1
            until Resource[1] == nil or Resource[1].Parent == nil or Attempts <= 0
        end
        Attempts = Data['Attempts']
    end
end)

local function AskQuestion(HeaderText, DescriptionText, AskText)
    local Question = InputBox:Clone()
    Question.Name, Question.Parent, Question.PlaceholderText, Question['Description'].Text, Question['Header'].Text = Current, Background, AskText, DescriptionText, HeaderText
    Question:TweenPosition(UDim2.new(.5,0,.5,0), 'In', 'Sine', .5)
end

function CalculateLimit(Number, Less, High)
    Number = tonumber(Number)
    if Number == nil then
        return High - Less
    elseif Number < Less then
        return Less
    elseif Number > High then
        return High
    elseif Number > Less and Number < High then
        return Number
    else
        return High - Less
    end
end

function CalculateBool(Bool)
    if Bool:lower() == ('false' or 'f') then
        return false
    elseif Bool:lower() == ('true' or 't') then
        return true
    else
        return false
    end
end

Next.MouseButton1Down:Connect(function()
    if Current == 0 then
        AskQuestion('Collection Amount', 'How many of one thing do you want before auto-selling?', 'Amount (Max: 10000)')
    else
        local PassedObject = Background[tostring(Current-1)]
        if Current == 1 then
            Data['ToCollect'] = CalculateLimit(PassedObject.Text, 1, 10000)
            AskQuestion('Auto Sell', 'How many (in batch) do you want to sell at a time?', 'Amount (Max: 10000)')
        elseif Current == 2 then
            Data['ToSell'] = CalculateLimit(PassedObject.Text, 1, 10000)
            AskQuestion('Egg Offset', 'How many resources should it collect before attempting to collect an egg?', 'Amount (Default: 10)')
        elseif Current == 3 then
            Data['EggOffset'] = CalculateLimit(PassedObject.Text, 1, 100000)
            AskQuestion('Kick On (Other) Player Join', 'If another player joins, kick yourself.', 'True/False')
        elseif Current == 4 then
            Data['KickPlayer'] = CalculateBool(PassedObject.Text)
            AskQuestion('Attempts To Make', 'How many times should it retry before giving up picking up a resource?', 'Amount')
        elseif Current == 5 then
            Data['Attempts'] = CalculateLimit(PassedObject.Text, 1, 1000)
        end
        PassedObject:TweenPosition(UDim2.new(.5,0,-1.5,0), 'Out', 'Sine', .5, true)
    end
    Current = Current + 1
    if Current == 6 then
        Blur:Destroy()
        Background:ClearAllChildren()
        Background.BackgroundTransparency = 0
		StarterGui:SetCore('TopbarEnabled', false)
        coroutine.resume(PlacePlatform)
        coroutine.resume(StartLoop)
        if Data['KickPlayer'] then
            game:GetService'Players'.PlayerAdded:Connect(function(UserPlayer)
                if UserPlayer.UserId ~= Player.UserId then
                    return Player:Kick(string.format('Warrior\'s AutoFarm\nKicked because %s joined.', UserPlayer.Name))
                end
            end)
        end
    end
end)
